
vim python缩进与检查

python编程过程，最郁闷的应该就是缩进问题了，一搞不好就会出现语法错误，我的vim因为也编辑其它类型的语言文件，设置了autoindent与smartindent，每次一回车换行，就会在前面插入一些tab符与一些空格，搞的莫名奇妙，不知道怎么出来的
indent/python.vim是一个不错的插件，使用它之后就修正了缩进的问题。安装方法：
1.下载那个vim脚本后，将它放到~/.vim/indent/（Windows下应该是$VIMDIR$\vimfiles\indent\）
2.确认你的vimrc中已经配置了filetype indent on
编辑一个test.py试试看，换行缩进的问题解决了吧
另外的一个是对python脚本进行检查，使用python_check_syntax可以很方便的检查，检查的内容包含语法正确性，未定义的变量，include但没有使用过的包等，我就通过这个检查出micolog中module.py文件的一些错误:)安装方法：
1.下载vim脚本，放到~/.vim/ftplugin/python中（ftplugin是指文件类型的插件）
2.编辑~/.vimrc文件，添加
      let g:pcs_hotkey=":pyc"  
      let g:pcs_check_when_saving='true'
(这里我设置的检查调用命令是pyc，因为默认的cs命令与cscope冲突了)
3.安装pyflakes，ubuntu的好整，直接sudo apt-get insall pyflakes就行了。或者自己下一个安装上也行
编辑test.py估计弄一些错误，输入 :pyc 是不是就能检查出来了，或者使用 :w 保存的时候也会自动检查的



VIM editor for Python 详细支持脚本 

 

1. 在 Vim 中编写 Python 程序本文档介绍如何在 Vim 中更方便的编写 Python 程序。 
 
单元测试下面是我的 .vimrc 中与 Python 单元测试相关的设置，你可以直接把它们拷贝到你的 vimrc 文件中使用。 


if has("autocmd")

  " 自动检测文件类型并加载相应的设置
  filetype plugin indent on

  " Python 文件的一般设置，比如不要 tab 等
  autocmd FileType python setlocal et | setlocal sta | setlocal sw=4

  " Python Unittest 的一些设置
  " 可以让我们在编写 Python 代码及 unittest 测试时不需要离开 vim
  " 键入 :make 或者点击 gvim 工具条上的 make 按钮就自动执行测试用例
  autocmd FileType python compiler pyunit
  autocmd FileType python setlocal makeprg=python\ ./alltests.py
  autocmd BufNewFile,BufRead test*.py setlocal makeprg=python\ %

  " 自动使用新文件模板
  autocmd BufNewFile test*.py 0r ~/.vim/skeleton/test.py
  autocmd BufNewFile alltests.py 0r ~/.vim/skeleton/alltests.py
  autocmd BufNewFile *.py 0r ~/.vim/skeleton/skeleton.py

endif
最中间的是关于 unittest 的一些设置。第一条把 python 文件的编译器设置为 pyunit。第二条设置 python 文件的 make 操作为执行 python ./alltests.py 这样的一条命令；这样对于任何一个 .py 文件，我们就可以在 VIM 的命令模式键入 :make 回车来执行对整个模块的测试了，如果你喜欢用 Gvim，你也可以用鼠标点击工具栏上的 make 快捷按钮来执行这一操作。第三条把名字为 test*.py 的文件的 make 操作设置为只执行该 test 文件，这样我们在编写一个特定的测试程序时，就不需要每次都把所有的测试代码都运行一遍了。 

上面设置中，最后的几行可以保证我在编写一个新文件时，Vim 会自动根据文件名替我选择一个模板文件，这样我需要键入的代码就可以更少了  

你可以下载我使用的完整的 .vimrc 文件，还有前面配置中用到的模板文件：skeleton.py、test.py 和 alltests.py。 

上面的设置都我在自己的 Linux 中使用的，所有的路径名都是 Linux/Unix 的格式。如果你有需要，可以使用 Windows 的路径名代替它们，比如这样： 

  autocmd FileType python setlocal makeprg=\"C:\\Program\ Files\\Plone 2\\Python\\python\"\ ./alltests.py
  autocmd BufNewFile,BufRead test*.py setlocal makeprg=\"C:\\Program\ Files\\Plone 2\\Python\\python\"\ %
给要调用的 Python 加上全路径。要注意的是，这里面出现的任何空格都要以转义形式出现，就是前面要加上反斜线 \；其它的特殊字符也要做相应的转义，比如 Windows 风格的路径分隔符 \，还有双引号 "(Windows 里要使用的文件名、路径如果包含空格，一定记得把它们用双引号包裹起来)。 

注：我已经发现 Vim 6.1 的 make 操作调用的命令行有误，它不能把程序的所有输出全部捕捉到，我们 PyUnit 的输出也会受这个 bug 的连累。建议使用 Vim 的最新版本，比如现在的 6.3 已经修正这个 bug。 

 

1.1.2. 代码自动完成注：7.0(7.1?)版本的VIM已经支持python的自动完成，可以不再安装额外的脚本，使用<C-X><C-O>激活自动完成。 

另外，我还使用了 pydiction，这是一个相当不错的 Python 代码自动完成的脚本。为了使用这个功能，我把它放在了 ~/.vim/tools 目录中，并在 .vimrc 中增加如下设置： 

" python auto-complete code
" Typing the following (in insert mode):
"   os.lis<Ctrl-n>
" will expand to:
"   os.listdir(
" Python 自动补全功能，只需要反覆按 Ctrl-N 就行了
if has("autocmd")
  autocmd FileType python set complete+=k~/.vim/tools/pydiction
endif
 

1.1.3. 语法检查python的语法检查可以使用python自身的编译器或pyflakes、pylint等工具。要VIM支持语法检查可以安装插件eclim。eclim是一个将eclipse整个进vim的工具。python语法检查的功能可以在不需要eclipse的情况下使用。但由于eclim的安装包在找不到eclipse的时候无法正常工作，所以可以手动将eclim的vim脚本复制到vim目录。 

安装好后在python脚本保存时候会自动使用python编译器和pyflakes进行语法检查（pyflakes需要另外安装）。
